{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport \"../assets/css/main.css\";\nimport \"../assets/css/webfonts.css\";\nimport { BlobContextProvider } from \"../components/Context/BlobContext\";\nimport Logo from \"../components/LogoLoad\"; // import App from 'next/app'\n\nimport Head from \"next/head\";\n\nfunction WiseyBoyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  useEffect(function () {\n    var timer = null;\n\n    if (loading) {\n      timer = setTimeout(function () {\n        setLoading(false);\n      }, 3300);\n    }\n\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [loading, setLoading]);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Tom Wise Designs\")), loading ? __jsx(Logo, null) : __jsx(BlobContextProvider, null, __jsx(Component, pageProps)));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default WiseyBoyApp;","map":null,"metadata":{},"sourceType":"module"}