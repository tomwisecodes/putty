{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef, useEffect } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nconst hover = keyframes([\"0%{top:-25px;left:-25px;width:50px;height:50px;}100%{top:-40px;left:-40px;width:80px;height:80px;border:5px solid #18922B;}\"]);\nconst Circle = styled.div.withConfig({\n  displayName: \"MouseCircle__Circle\",\n  componentId: \"skopu-0\"\n})([\"position:absolute;border-radius:50%;border:2px solid #040234;transition:opacity 0.3s ease 0s;top:-25px;left:-25px;width:50px;height:50px;margin-right:24px;backface-visibility:hidden;pointer-events:none;z-index:9999;animation:\", \";animation-duration:0.5s;animation-fill-mode:forwards;animation-timing-function:ease-in-out;@media (max-width:900px){display:none;}\"], props => props.linkHovered ? hover : \"unset\");\n\nconst MouseCircle = () => {\n  const cricleRef = useRef();\n  const {\n    0: mouseX,\n    1: setMouseX\n  } = useState(null);\n  const {\n    0: mouseY,\n    1: setMouseY\n  } = useState(null);\n  const {\n    0: mouseMove,\n    1: setMouseMove\n  } = useState(null);\n  const {\n    0: linkHovered,\n    1: setLinkHovered\n  } = useState(false);\n\n  const handleLinkHoverEvents = () => {\n    document.querySelectorAll(\"a\").forEach(el => {\n      el.addEventListener(\"mouseover\", () => setLinkHovered(true));\n      el.addEventListener(\"mouseout\", () => setLinkHovered(false));\n    });\n    document.querySelectorAll(\"button\", \".hover\").forEach(el => {\n      el.addEventListener(\"mouseover\", () => setLinkHovered(true));\n      el.addEventListener(\"mouseout\", () => setLinkHovered(false));\n    });\n  };\n\n  useEffect(() => {\n    if (window === \"undefined\") {\n      return null;\n    }\n\n    const setFromEvent = e => {\n      setMouseX(e.pageX);\n      setMouseY(e.pageY);\n    };\n\n    const mouseMoving = () => {\n      setMouseMove(true);\n    };\n\n    handleLinkHoverEvents();\n    window.addEventListener(\"mousemove\", setFromEvent);\n    window.addEventListener(\"mousemove\", mouseMoving);\n    return () => {\n      window.removeEventListener(\"mousemove\", setFromEvent);\n    };\n  }, []);\n  useEffect(() => {\n    cricleRef.current.style.transform = `translate3d( ${mouseX}px, ${mouseY}px, 0) `;\n  }, [mouseX, mouseY]);\n  return __jsx(Circle, {\n    ref: cricleRef,\n    linkHovered: linkHovered\n  });\n};\n\nexport default MouseCircle;","map":null,"metadata":{},"sourceType":"module"}