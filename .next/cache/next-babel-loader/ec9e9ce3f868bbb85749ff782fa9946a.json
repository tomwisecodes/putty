{"ast":null,"code":"var _jsxFileName = \"/Users/tom/Documents/sites/tomWisePortfolio/tomwise-portfolio/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useState, useEffect } from \"react\";\nimport \"../assets/css/main.css\";\nimport \"../assets/css/webfonts.css\";\nimport { BlobContextProvider } from \"../components/Context/BlobContext\";\nimport Logo from \"../components/LogoLoad\";\nimport Head from \"next/head\";\n\nfunction WiseyBoyApp({\n  Component,\n  pageProps\n}) {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    let timer = null;\n\n    if (loading) {\n      timer = setTimeout(function () {\n        setLoading(false);\n      }, 3300);\n    }\n\n    return () => clearTimeout(timer);\n  }, [loading, setLoading]);\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, \"Tom Wise Designs\")), loading ? __jsx(Logo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }) : __jsx(BlobContextProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }))));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default WiseyBoyApp;","map":{"version":3,"sources":["/Users/tom/Documents/sites/tomWisePortfolio/tomwise-portfolio/pages/_app.js"],"names":["useState","useEffect","BlobContextProvider","Logo","Head","WiseyBoyApp","Component","pageProps","loading","setLoading","timer","setTimeout","clearTimeout"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,wBAAP;AACA,OAAO,4BAAP;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,SAASC,WAAT,CAAqB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAArB,EAA+C;AAC7C,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,KAAK,GAAG,IAAZ;;AACA,QAAIF,OAAJ,EAAa;AACXE,MAAAA,KAAK,GAAGC,UAAU,CAAC,YAAY;AAC7BF,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAFiB,EAEf,IAFe,CAAlB;AAGD;;AACD,WAAO,MAAMG,YAAY,CAACF,KAAD,CAAzB;AACD,GARQ,EAQN,CAACF,OAAD,EAAUC,UAAV,CARM,CAAT;AASA,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF,EAKGD,OAAO,GACN,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAGN,MAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CARJ,CADF;AAeD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeF,WAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"../assets/css/main.css\";\nimport \"../assets/css/webfonts.css\";\nimport { BlobContextProvider } from \"../components/Context/BlobContext\";\nimport Logo from \"../components/LogoLoad\";\nimport Head from \"next/head\";\n\nfunction WiseyBoyApp({ Component, pageProps }) {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let timer = null;\n    if (loading) {\n      timer = setTimeout(function () {\n        setLoading(false);\n      }, 3300);\n    }\n    return () => clearTimeout(timer);\n  }, [loading, setLoading]);\n  return (\n    <>\n      <Head>\n        <title>Tom Wise Designs</title>\n      </Head>\n\n      {loading ? (\n        <Logo />\n      ) : (\n        <BlobContextProvider>\n          <Component {...pageProps} />\n        </BlobContextProvider>\n      )}\n    </>\n  );\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default WiseyBoyApp;\n"]},"metadata":{},"sourceType":"module"}